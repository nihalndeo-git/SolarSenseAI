{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // Your backend server URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Function to predict energy generation\nexport const predictEnergy = async locationData => {\n  try {\n    const response = await apiClient.post('/predict-energy', locationData);\n    return response.data;\n  } catch (error) {\n    console.error('Error predicting energy:', error);\n    throw error;\n  }\n};\n\n// Function to get user data\nexport const getUserData = async userId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n};\n\n// Function to save user project\nexport const saveUserProject = async (userId, projectData) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/users/${userId}/projects`, projectData);\n    return response.data;\n  } catch (error) {\n    console.error('Error saving user project:', error);\n    throw error;\n  }\n};\n\n// This function needs to be exported so DashboardPage can import it.\nexport const fetchEnergyData = async projectId => {\n  console.log(`Fetching data for project ${projectId}`);\n  // Mock data for demonstration purposes\n  return Promise.resolve({\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n    consumption: [65, 59, 80, 81, 56, 55],\n    generation: [45, 49, 60, 71, 46, 40]\n  });\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","predictEnergy","locationData","response","post","data","error","console","getUserData","userId","get","API_BASE_URL","saveUserProject","projectData","fetchEnergyData","projectId","log","Promise","resolve","labels","consumption","generation"],"sources":["/home/nihal/Documents/COLLEGE_STUFF/EDAI-IT/SolarSense/green-it-solar-map/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api', // Your backend server URL\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Function to predict energy generation\nexport const predictEnergy = async (locationData: {\n  lat: number;\n  lng: number;\n  area_sq_ft: number;\n  panel_efficiency: number;\n}) => {\n    try {\n        const response = await apiClient.post('/predict-energy', locationData);\n        return response.data;\n    } catch (error) {\n        console.error('Error predicting energy:', error);\n        throw error;\n    }\n};\n\n// Function to get user data\nexport const getUserData = async (userId) => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/users/${userId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching user data:', error);\n        throw error;\n    }\n};\n\n// Function to save user project\nexport const saveUserProject = async (userId, projectData) => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/users/${userId}/projects`, projectData);\n        return response.data;\n    } catch (error) {\n        console.error('Error saving user project:', error);\n        throw error;\n    }\n};\n\n// This function needs to be exported so DashboardPage can import it.\nexport const fetchEnergyData = async (projectId: string) => {\n  console.log(`Fetching data for project ${projectId}`);\n  // Mock data for demonstration purposes\n  return Promise.resolve({\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n    consumption: [65, 59, 80, 81, 56, 55],\n    generation: [45, 49, 60, 71, 46, 40],\n  });\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,YAKnC,IAAK;EACF,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,IAAI,CAAC,iBAAiB,EAAEF,YAAY,CAAC;IACtE,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,MAAM,IAAK;EACzC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAG,CAAC,GAAGC,YAAY,UAAUF,MAAM,EAAE,CAAC;IACnE,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,eAAe,GAAG,MAAAA,CAAOH,MAAM,EAAEI,WAAW,KAAK;EAC1D,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGO,YAAY,UAAUF,MAAM,WAAW,EAAEI,WAAW,CAAC;IAC1F,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMQ,eAAe,GAAG,MAAOC,SAAiB,IAAK;EAC1DR,OAAO,CAACS,GAAG,CAAC,6BAA6BD,SAAS,EAAE,CAAC;EACrD;EACA,OAAOE,OAAO,CAACC,OAAO,CAAC;IACrBC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;IAChEC,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACrCC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EACrC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}