{"ast":null,"code":"var _jsxFileName = \"/home/nihal/Documents/COLLEGE_STUFF/EDAI-IT/SolarSense/green-it-solar-map/client/src/pages/HomePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Texture for the Earth\nconst earthTextureUrl = 'https://raw.githubusercontent.com/chris-courses/react-three-fiber-examples/main/examples/globe-r3f/textures/8k_earth_daymap.jpg';\n\n// Define an interface for our coordinates\n\nconst HomePage = () => {\n  _s();\n  const [target, setTarget] = useState(null);\n  const handleFlyTo = () => {\n    // For this example, we'll hardcode the coordinates for VIT Pune.\n    // In a real app, you would get these from a geocoding API based on user input.\n    setTarget({\n      lat: 18.4582,\n      lng: 73.8507\n    });\n  };\n  const containerStyle = {\n    position: 'relative',\n    // Needed for positioning child elements\n    width: '100%',\n    height: '80vh',\n    // Make it take up most of the viewport height\n    backgroundColor: '#000'\n  };\n  const uiContainerStyle = {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n    zIndex: 10,\n    background: 'rgba(255, 255, 255, 0.8)',\n    padding: '10px',\n    borderRadius: '5px'\n  };\n  const headlineStyle = {\n    fontSize: '2.5rem',\n    color: '#333'\n  };\n  const missionStyle = {\n    fontSize: '1.2rem',\n    color: '#666',\n    maxWidth: '600px',\n    margin: '0 auto 30px auto'\n  };\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n    const currentMount = mountRef.current;\n\n    // Scene, Camera, Renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, currentMount.clientWidth / currentMount.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);\n    currentMount.appendChild(renderer.domElement);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Earth Sphere with Texture\n    const textureLoader = new THREE.TextureLoader();\n    const geometry = new THREE.SphereGeometry(2, 64, 64);\n    const material = new THREE.MeshStandardMaterial({\n      map: textureLoader.load(earthTextureUrl)\n    });\n    const earth = new THREE.Mesh(geometry, material);\n    scene.add(earth);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(5, 3, 5);\n    scene.add(pointLight);\n    camera.position.z = 5;\n\n    // Animation Loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // Update controls\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Fly-to Animation Logic\n    if (target) {\n      const {\n        lat,\n        lng\n      } = target;\n      const radius = 2; // Radius of our sphere\n\n      // Convert lat/lng to 3D coordinates\n      const phi = (90 - lat) * (Math.PI / 180);\n      const theta = (lng + 180) * (Math.PI / 180);\n      const targetPosition = new THREE.Vector3(-radius * Math.sin(phi) * Math.cos(theta), radius * Math.cos(phi), radius * Math.sin(phi) * Math.sin(theta));\n\n      // Use GSAP to animate the camera\n      gsap.to(camera.position, {\n        duration: 2,\n        x: targetPosition.x * 1.5,\n        // Zoom in closer\n        y: targetPosition.y * 1.5,\n        z: targetPosition.z * 1.5,\n        onUpdate: () => {\n          camera.lookAt(earth.position);\n          controls.target.copy(earth.position); // Also update controls target\n        }\n      });\n    }\n\n    // Handle Resize\n    const handleResize = () => {\n      camera.aspect = currentMount.clientWidth / currentMount.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      currentMount.removeChild(renderer.domElement);\n    };\n  }, [target]); // Rerun effect when targetCoordinates change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: uiContainerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"e.g., VIT Pune\",\n        style: {\n          marginRight: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFlyTo,\n        children: \"Fly to Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"6Wu1q+a0sVXdSPpXRRWe47i8CJA=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","gsap","jsxDEV","_jsxDEV","earthTextureUrl","HomePage","_s","target","setTarget","handleFlyTo","lat","lng","containerStyle","position","width","height","backgroundColor","uiContainerStyle","top","left","zIndex","background","padding","borderRadius","headlineStyle","fontSize","color","missionStyle","maxWidth","margin","mountRef","current","currentMount","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableDamping","dampingFactor","textureLoader","TextureLoader","geometry","SphereGeometry","material","MeshStandardMaterial","map","load","earth","Mesh","add","ambientLight","AmbientLight","pointLight","PointLight","set","z","animate","requestAnimationFrame","update","render","radius","phi","Math","PI","theta","targetPosition","Vector3","sin","cos","to","duration","x","y","onUpdate","lookAt","copy","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","removeChild","style","children","type","placeholder","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["/home/nihal/Documents/COLLEGE_STUFF/EDAI-IT/SolarSense/green-it-solar-map/client/src/pages/HomePage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { gsap } from 'gsap';\nimport Button from '../components/ui/Button';\n\n// Texture for the Earth\nconst earthTextureUrl = 'https://raw.githubusercontent.com/chris-courses/react-three-fiber-examples/main/examples/globe-r3f/textures/8k_earth_daymap.jpg';\n\n// Define an interface for our coordinates\ninterface Coordinates {\n  lat: number;\n  lng: number;\n}\n\nconst HomePage = () => {\n  const [target, setTarget] = useState<Coordinates | null>(null);\n\n  const handleFlyTo = () => {\n    // For this example, we'll hardcode the coordinates for VIT Pune.\n    // In a real app, you would get these from a geocoding API based on user input.\n    setTarget({ lat: 18.4582, lng: 73.8507 });\n  };\n\n  const containerStyle: React.CSSProperties = {\n    position: 'relative', // Needed for positioning child elements\n    width: '100%',\n    height: '80vh', // Make it take up most of the viewport height\n    backgroundColor: '#000',\n  };\n\n  const uiContainerStyle: React.CSSProperties = {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n    zIndex: 10,\n    background: 'rgba(255, 255, 255, 0.8)',\n    padding: '10px',\n    borderRadius: '5px',\n  };\n\n  const headlineStyle: React.CSSProperties = {\n    fontSize: '2.5rem',\n    color: '#333',\n  };\n\n  const missionStyle: React.CSSProperties = {\n    fontSize: '1.2rem',\n    color: '#666',\n    maxWidth: '600px',\n    margin: '0 auto 30px auto',\n  };\n\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n    const currentMount = mountRef.current;\n\n    // Scene, Camera, Renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, currentMount.clientWidth / currentMount.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);\n    currentMount.appendChild(renderer.domElement);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Earth Sphere with Texture\n    const textureLoader = new THREE.TextureLoader();\n    const geometry = new THREE.SphereGeometry(2, 64, 64);\n    const material = new THREE.MeshStandardMaterial({\n      map: textureLoader.load(earthTextureUrl),\n    });\n    const earth = new THREE.Mesh(geometry, material);\n    scene.add(earth);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(5, 3, 5);\n    scene.add(pointLight);\n\n    camera.position.z = 5;\n\n    // Animation Loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // Update controls\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Fly-to Animation Logic\n    if (target) {\n      const { lat, lng } = target;\n      const radius = 2; // Radius of our sphere\n\n      // Convert lat/lng to 3D coordinates\n      const phi = (90 - lat) * (Math.PI / 180);\n      const theta = (lng + 180) * (Math.PI / 180);\n      const targetPosition = new THREE.Vector3(\n        -radius * Math.sin(phi) * Math.cos(theta),\n        radius * Math.cos(phi),\n        radius * Math.sin(phi) * Math.sin(theta)\n      );\n\n      // Use GSAP to animate the camera\n      gsap.to(camera.position, {\n        duration: 2,\n        x: targetPosition.x * 1.5, // Zoom in closer\n        y: targetPosition.y * 1.5,\n        z: targetPosition.z * 1.5,\n        onUpdate: () => {\n          camera.lookAt(earth.position);\n          controls.target.copy(earth.position); // Also update controls target\n        },\n      });\n    }\n\n    // Handle Resize\n    const handleResize = () => {\n      camera.aspect = currentMount.clientWidth / currentMount.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      currentMount.removeChild(renderer.domElement);\n    };\n  }, [target]); // Rerun effect when targetCoordinates change\n\n  return (\n    <div style={containerStyle}>\n      <div style={uiContainerStyle}>\n        <input type=\"text\" placeholder=\"e.g., VIT Pune\" style={{ marginRight: '10px' }} />\n        <button onClick={handleFlyTo}>Fly to Location</button>\n      </div>\n      <div ref={mountRef} style={{ width: '100%', height: '100%' }} />\n    </div>\n  );\n};\n\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}